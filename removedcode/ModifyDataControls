/* replaced event bus with parent/child references due to Jest errors

import {eventBus} from "@/main.js"

applyNewData() {
  eventBus.$emit("applyNewData", this.vars.instance)
  eventBus.$emit("updateHeader", this.prodName, this.prodQuant)*/
}

created() {
  eventBus.$on("modifyData", (newInstance) => {
    this.vars.instance = newInstance
    this.openModifyData()
  })
}

*/

/* removed ModifyDataControls.vue completely due to HeaderButtons.vue now taking over its job

<!-- @TODO (Erik) Documentation -->
<template>
  <div class="modify-data-controls">
    <!-- Modify-Data Controls -->
    <v-slide-x-reverse-transition>
      <v-card id="mdc-gui" class="detail-card" v-show="modifyDataGui" transition="scroll-y-transition">
        <v-btn class="btn-close ma-2" @click="deactivateGui()" text icon color="primary">
          <v-icon>mdi-close</v-icon>
        </v-btn>

        <!-- Headline -->
        <p class="ml-3 mb-0 font-weight-light font-italic">Graph-Daten</p>
        <p class="prodname ml-3 mr-12 mb-0">{{graphName}}</p>
      
        <!-- graphName Selection -->
        <v-row>
          <v-col sm="12">
            <v-text-field
              class="mt-2"
              id="graphName"
              label="Dateiname"
              v-model="graphName"
              :disabled="disabled"
              outlined
              hide-details
            ></v-text-field>
          </v-col>
        </v-row>
      
        <!-- prodName & prodQuant Selection -->
        <v-row>
          <v-col sm="8">
            <v-text-field
              id="prodName"
              label="Produktname"
              v-model="prodName"
              :disabled="disabled"
              outlined
              hide-details
            ></v-text-field>
          </v-col>
          <v-col sm="4">
            <v-text-field
              id="prodQuant" 
              label="Stückzahl" 
              v-model="prodQuant" 
              :disabled="disabled"
              outlined 
              hide-details
            ></v-text-field>
          </v-col>
        </v-row>
      
        <!-- latestDate Display -->
        <v-row>
          <v-col sm="12">
            <v-text-field
              id="latestDate"
              label="Letzte Speicherung"
              v-model="latestDate"
              :disabled="true"
              outlined
              hide-details
            ></v-text-field>
          </v-col>
        </v-row>

        <!-- Save & Cancel Buttons -->
        <v-row>
          <v-spacer sm="4" />
          <v-col sm="4" align="right">
            <v-btn color="success" :disabled="disabled" outlined @click="applyNewData()">Übernehmen</v-btn>
          </v-col>
          <v-col sm="4" align="right">
            <v-btn id="mdc-gui-cancel" color="lightgrey" outlined @click="deactivateGui()">Abbrechen</v-btn>
          </v-col>
        </v-row>

      </v-card>
    </v-slide-x-reverse-transition>
  </div>
</template>

<script>
import BasicData from "@/vargraph/BasicData.js";

export default {
  name: "ModifyDataControls",
    data() {
      return {
        modifyDataGui: false,
        disabled: false,
        graphName: "",
        latestDate: "",
        prodName: "",
        prodQuant: ""
      }
    },
  methods: {
    openModifyData(newInstance) {
      this.vars.instance = newInstance
      this.loadGraphData()
      this.$parent.$parent.$refs.createControls.deactivateGui();
      this.$parent.$parent.$refs.detailControls.deactivateGui();
      this.modifyDataGui = true
    },
    loadGraphData() {
      // @TODO (Erik) Stückzahl usw. in cy.json speichern
      if(this.vars.instance.graphName == undefined) {
        this.disabled = true
        this.graphName = "(noch nichts geladen - WIP)"
        this.latestDate = "noch nicht gespeichert"
        this.prodName = ""
        this.prodQuant = ""
      }
      else {
        this.disabled = false
        this.graphName = this.vars.instance.getGraphName()
        this.latestDate = this.vars.instance.getLatestDate()
        //this.prodName = this.vars.instance.getProdName()
        //this.prodQuant = this.vars.instance.getProdQuant()
      }
    },
    applyNewData() {
      this.vars.instance.setGraphName(this.graphName)
      this.vars.instance.setLatestDate(new Date())
      //this.vars.instance.setProdName(this.prodName)
      //this.vars.instance.setProdQuant(this.prodQuant)
      this.$parent.$parent.$refs.toolbar.updateData(this.vars.instance)
      this.$parent.$parent.$refs.graphHeader.updateData(this.prodName, this.prodQuant)
      this.deactivateGui()
    },
    deactivateGui() {
      this.modifyDataGui = false
    }
  },
  created() {
    this.vars = {
      instance: BasicData
    }
  }
}
</script>

*/